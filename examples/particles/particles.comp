/*
Huge parts of this shader are directly taken from Sascha Willems compute shader particle example
lincesed under MIT license:

The MIT License (MIT)

Copyright (c) 2016 Sascha Willems

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

Code Source (10th April 2016):
https://github.com/SaschaWillems/Vulkan/blob/master/data/shaders/computeparticles/particle.comp
*/


#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

struct Particle
{
	vec2 pos;
	vec2 vel;
	vec2 col;
};

layout(local_size_x = 16) in;

layout(std430, set = 0, binding = 0) buffer Pos
{
	Particle particles[];
};

layout(set = 0, binding = 1) uniform UBO
{
	float deltaT;
	float speed;

	float attract;
	float attractorX;
	float attractorY;
} ubo;

vec2 attraction(vec2 pos, vec2 attractPos)
{
    vec2 delta = attractPos - pos;
	const float damp = 0.5;
    float dDampedDot = dot(delta, delta) + damp;
    float invDist = 1.0f / sqrt(dDampedDot);
    float invDistCubed = invDist*invDist*invDist;
    return delta * invDistCubed * 0.035;
}

void main()
{
    // Current SSBO index
    uint index = gl_GlobalInvocationID.x;
	// Don't try to write beyond particle count
    // if (index >= particles.length())
	// 	return;

    // Read position and velocity
    vec2 vPos = particles[index].pos;
    vec2 vVel = particles[index].vel;

    // Calculate new velocity depending on attraction point
	if(ubo.attract != 0.0)
		vVel += ubo.deltaT * attraction(vPos, vec2(ubo.attractorX, ubo.attractorY));

	vVel *= 1 - (0.6 * ubo.deltaT);

    // Move by velocity
	vPos += vVel * ubo.speed * ubo.deltaT * 10;

	if(vPos.x < -1.0)
	{
		float fac = abs((-1.0 - particles[index].pos.x) / (vVel.x * ubo.speed * ubo.deltaT * 10));
		vPos = particles[index].pos + vVel * fac * ubo.speed * ubo.deltaT * 10;

		vVel.x = abs(vVel.x);
		vVel *= 0.4; //they lose energy when colliding
		vPos += vVel * (1.f - fac) * ubo.speed * ubo.deltaT * 10;

		// vPos.x = fac;
		// vPos.y = fac;
		//
		// vVel = vec2(0, 0);
	}

	if(vPos.x > 1.0)
	{
		vVel.x = abs(vVel.x) * -0.4; //they lose energy when colliding
		vPos.x = particles[index].pos.x;
	}

	if(vPos.y < -1.0)
	{
		// vVel.y = abs(vVel.y) * 0.4; //they lose energy when colliding
		// vPos.y = particles[index].pos.y;
		vPos.y = -0.99999;
		vVel = vec2(0, 0);
	}

	if(vPos.y > 1.0)
	{
		vPos.y = particles[index].pos.y;
		// vVel.y -= 0.022 * abs(fract((1 + vPos.x) * 100)) * abs(fract(vVel.y * 100) * fract(vVel.x * 100));
		// vVel.x -= 0.00025 * fract((1 + vPos.x) * 1000) * fract(vVel.y * 1000) * fract(vVel.x * 1000);
		vVel.y -= sign(vVel.y) * 0.02 * abs(fract((1 + vPos.x) * 10000)) * abs(fract(vVel.y * 100000) * fract(vVel.x * 100));
		vVel.x -= vVel.x * 0.005 * (1 - abs(fract((1 + vPos.x) * 10000))) * fract(vVel.y * 1000) * abs(fract(vVel.x * 1000000));
	}

    // Write back
    particles[index].pos = vPos;
    particles[index].vel = vVel;
	particles[index].col.y = 1.0 - clamp(100 * length(vVel), 0., 1.);

}
