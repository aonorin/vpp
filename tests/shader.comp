#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

struct Particle
{
	vec4 pos;
	vec4 vel;
	vec4 col;
};

layout (std430, binding = 0) buffer Pos
{
	Particle particles[];
};

layout (local_size_x = 16) in;

/*
layout (binding = 1) uniform UBO
{
	uint deltaT;
	vec2 attractorPosition;
} ubo;
*/

void main()
{

uint index = gl_GlobalInvocationID.x;
if (index >= particles.length())
	return;

particles[index].pos.x = 0.5f;
particles[index].vel.x = 0.5f;
//particles[index].vel.xyz = vec3(0.f, 1.f, 0.f);
//particles[index].col.xyz = vec3(1.f, 0.f, 0.f);

/*
// Read position and velocity
vec3 vPos = particles[index].pos.xyz;
vec3 vVel = particles[index].vel.xyz;

// Calculate new velocity depending on attraction point
vec3 delta = vec3(ubo.attractorPosition, 0.f) - vPos;
vVel += 0.0000001 / delta;

// Move by velocity
vPos += vVel * ubo.deltaT * 0.01;

if ((vPos.x < -1.0) || (vPos.x > 1.0))
	vVel.x -= vVel.x;

if ((vPos.y < -1.0) || (vPos.y > 1.0))
	vVel.y -= vVel.y;

// Write back
particles[index].pos.xyz = vPos;
particles[index].vel.xyz = vVel;
*/

}
